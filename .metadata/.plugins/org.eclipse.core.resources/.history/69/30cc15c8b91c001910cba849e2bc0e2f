/**
 * Peer.java
 * 
 * Peer is a SharingData concrete subclass which encapsulates access to the peer database table. 
 * Represents a peer with attributes for host IP address and a globally unique identifier (GUID) which
 * is the primary key generated by the DBMS.
 * 
 * The two main situations where this class is used are:
 * 1) Creating a new instance in memory and committing its attributes to the database in a new record
 * 2) Querying the database to obtain an existing record and then creating a Peer instance in memory
 *    with corresponding attributes.
 *    
 * Supports record deletion (implements delete()), host address lookup by GUID in DB, 
 * and lookup of GUID by host address in DB. Also provides access to GUID and host address 
 * attributes held in each instance.
 * 
 * The inherited sql.Connection instance is used to query the database.
 * 
 * @author Oloff Biermann
 */
package org.biermann.tme3.p2pindex.data;

import java.sql.*;

public class Peer extends SharingData
{
	private int peerGUID;
	private String hostAddress;
	
	
	/** Constructs a Peer given the peerGUID of an existing Peer
	 *  which has already been committed to the database.
	 *  
	 *  Queries database to load the peer.
	 *  
	 *  @param dbConnection Connection to communicate with database.
	 *  @param peerId int GUID of the peer in database
	 */
	public Peer(Connection dbConnection, int peerId) throws SQLException
	{
		this(dbConnection, queryHostAddress(dbConnection, peerId), peerId);
	}
	
	
	/** Constructs a Peer which does not already exist in the
	 * database. A new record is created for this Peer, containing
	 * the host address and the peer GUID. 
	 * 
	 * An attempt will first be made to query the database for 
	 * an existing record and create the corresponding Peer in memory.
	 * A new record will be created if there is no existing record.
	 * 
	 * @param dbConnection Connection to be used to interact with db.
	 * @param hostAddress String Address of this peer.
	 * @throws SQLException if database query to store peer fails
	 */
	public Peer(Connection dbConnection, String hostAddress) throws SQLException
	{
		databaseConnection = dbConnection;
		this.hostAddress = hostAddress;
		
		/*Determine if record already exists */
		peerGUID = Peer.queryPeerGUID(databaseConnection, hostAddress);
		
		/*Record does not exist so create it. */
		if (peerGUID < 0)
		{
			peerGUID = commitData();     //Get attribute peerGUID to hold in memory for this object.
		}
		
	}
	
	/**Constructs a Peer object with all atributes passed as parameters.
	 * Does NOT query database, creating object in memory directly from
	 * the parameters provided.
	 * 
	 * @param dbConnection Connection to be used to interact with db.
	 * @param hostAddress String Address of this peer.
	 * @param peerGUID int GUID of the peer.
	 */
	public Peer(Connection dbConnection, String hostAddress, int peerGUID)
	{
		databaseConnection = dbConnection;
		this.hostAddress = hostAddress;
		this.peerGUID = peerGUID;
	}
	
	/**
	 * Get the GUID of this Peer.
	 * @return int of the GUID of this Peer.
	 */
	public int getGUID()
	{
		return peerGUID;
	}
	
	/**
	 * Get the host address of this peer.
	 * @return String holding the host address of this peer.
	 */
	
	public String getHostAddress()
	{
		return hostAddress;
	}
	
	
	/**
	 * Deletes the record associated with this Peer instance.
	 * @return Boolean true if success, false otherwise.
	 */
	public boolean delete() throws SQLException
	{
		/*If the record does not exist, return false */
		if (queryHostAddress(this.databaseConnection, this.peerGUID) == null)
			return false;
		
		String query = "DELETE FROM peer "
					   + "WHERE peerGUID = ?";
				
		try (PreparedStatement deleteStatement = databaseConnection.prepareStatement(query);)
		{
			deleteStatement.setInt(1, this.peerGUID);                       //Set the value of the first (and only) parameter to GUID for this Peer.
			 
			/*Execute the prepared statement to delete the matching record */
			deleteStatement.executeUpdate();
			return true;
		}
	}
	
	
	/**
	 * Get the host address associated with a Peer using the GUID.
	 * @return String Host address for this peer or null if no matching record.
	 */
	public static String queryHostAddress(Connection dbConnection, int peerGUID) throws SQLException
	{
		String query = "SELECT hostAddress "
						+ "FROM peer "
						+ "WHERE peerGUID = ?";
		
		try (PreparedStatement hostAddressStatement = dbConnection.prepareStatement(query);)
		{
			hostAddressStatement.setInt(1, peerGUID);                    //Set the value of the first (and only) parameter to GUID for this Peer.
			
			ResultSet result = hostAddressStatement.executeQuery();           //Execute prepared statement.
			
			if (!(result.first()))                                            //No matching result.
				return null;
			
			/*Trim any whitespace and return the value for the host address. */
			return result.getString(1).trim();
		}
	}
	
	/**
	 * Get the host address associated with a Peer using the GUID.
	 * @return int GUID for this peer or -1 if no matching record.
	 */
	public static int queryPeerGUID(Connection dbConnection, String peerAddress) throws SQLException
	{
		String query = "SELECT peerGUID"
						+ "FROM peer "
						+ "WHERE hostAddress = ?";
		
		try (PreparedStatement hostAddressStatement = dbConnection.prepareStatement(query);)
		{
			hostAddressStatement.setString(1, peerAddress);                    //Set the value of the first (and only) parameter to host address
			ResultSet result = hostAddressStatement.executeQuery();           //Execute prepared statement.
			
			if (!(result.first()))                                            //No matching result.
				return -1;
			
			return result.getInt(1);                                          //Return retrieved GUID.
		}
	}
	
	
	/**Attempts to store a new Peer record in the database. Obtains the GUID for the new record.
	 * 
	 * @return int GUID of the new record, or -1 if insertion fails (typically if record already exists)
	 */
	protected int commitData() throws SQLException
	{
		String query = "INSERT INTO peer(hostAddress) "
					 + "VALUES (\'" + this.hostAddress + "\')";
		
		try (Statement hostStatement = databaseConnection.createStatement();)
		{
			hostStatement.execute(query, Statement.RETURN_GENERATED_KEYS);     //Execute the query and indicate that the auto generated PK needs to be available
			ResultSet result = hostStatement.getGeneratedKeys();               //Get the auto generated key for this Peer and return it.
			
			/*No data was inserted so return -1. This also ensures that cursor is on first row. */
			if (!(result.first()))
				return -1;
			
			return result.getInt(1);
		}
			
	}
}
